{"version":3,"sources":["App.tsx","admin/AdminLogin.tsx","admin/AdminDefault.tsx","serviceWorker.js","index.tsx"],"names":["App","react_default","a","createElement","className","AdminDefault","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","email","password","handleEmailChange","bind","assertThisInitialized","handlePasswordChange","e","setState","target","value","index_es","container","direction","justify","alignItems","label","onChange","margin","variant","type","autoComplete","color","React","PureComponent","AdminLogin","Boolean","window","location","hostname","match","routing","react_router_dom","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAgBeA,MAbf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,oGC8COE,cA1CX,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACpBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,MAAM,oBAAqBC,SAAS,IAElDT,EAAKU,kBAAoBV,EAAKU,kBAAkBC,KAAvBV,OAAAW,EAAA,EAAAX,CAAAD,IACzBA,EAAKa,qBAAuBb,EAAKa,qBAAqBF,KAA1BV,OAAAW,EAAA,EAAAX,CAAAD,IALRA,iFAQNc,GACdX,KAAKY,SAAS,CAACP,MAAOM,EAAEE,OAAOC,qDAEdH,GACjBX,KAAKY,SAAS,CAACN,SAAUK,EAAEE,OAAOC,yCAIlC,OACIvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,UAC3D5B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CACIK,MAAM,QACNC,SAAUrB,KAAKO,kBACfe,OAAO,SACPC,QAAQ,WACRT,MAAOd,KAAKI,MAAMC,QAEtBd,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CACIK,MAAM,WACNC,SAAUrB,KAAKU,qBACfc,KAAK,WACLC,aAAa,mBACbH,OAAO,SACPC,QAAQ,aAEZhC,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQQ,QAAQ,YAAYG,MAAM,WAAlC,iBAlCWC,IAAMC,eCelBjC,cApBX,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACpBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,MAAM,oBAAqBC,SAAS,IAElDT,EAAKU,kBAAoBV,EAAKU,kBAAkBC,KAAvBV,OAAAW,EAAA,EAAAX,CAAAD,IAJLA,iFAONc,GACdX,KAAKY,SAAS,CAACP,MAAOM,EAAEE,OAAOC,yCAI/B,OACIvB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoC,EAAD,cAfWF,IAAMC,eCObE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gFCVAC,EACF5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,KACE9C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW7C,IACtCJ,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOE,KAAK,IAAIC,UAAWlD,OAMrCmD,IAASC,OAAOP,EAASQ,SAASC,eAAe,SD8G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c7445581.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ALLISO</h1>\n        <p>\n          Página en construcción\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport {TextField, Grid, Button} from '@material-ui/core'\n\ninterface IProps {\n\n}\ninterface IState {\n    email: any\n    password: any\n}\n\nclass AdminDefault extends React.PureComponent<IProps, IState> {\n    constructor(props: any) {\n        super(props)\n        this.state = {email:'email@example.com', password:''}\n\n        this.handleEmailChange = this.handleEmailChange.bind(this)\n        this.handlePasswordChange = this.handlePasswordChange.bind(this)\n    }\n\n    handleEmailChange(e: any) {\n        this.setState({email: e.target.value})\n    }\n    handlePasswordChange(e: any) {\n        this.setState({password: e.target.value})\n    }\n\n    render() {\n        return (\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                <TextField\n                    label=\"Email\"\n                    onChange={this.handleEmailChange}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    value={this.state.email}\n                />\n                <TextField\n                    label=\"Password\"\n                    onChange={this.handlePasswordChange}\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n                <Button variant=\"contained\" color=\"primary\" >\n                    Login\n                </Button>\n            </Grid>\n        )\n    }\n}\n\n\nexport default AdminDefault","import React from 'react'\nimport {TextField} from '@material-ui/core'\nimport AdminLogin from './AdminLogin'\n\n\nclass AdminDefault extends React.PureComponent {\n    constructor(props: any) {\n        super(props)\n        this.state = {email:'email@example.com', password:''}\n\n        this.handleEmailChange = this.handleEmailChange.bind(this)\n    }\n\n    handleEmailChange(e: any) {\n        this.setState({email: e.target.value})\n    }\n\n    render() {\n        return (\n            <div>\n                <AdminLogin />\n            </div>\n        )\n    }\n}\n\nexport default AdminDefault","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AdminDefault from './admin/AdminDefault'\nimport * as serviceWorker from './serviceWorker';\nimport {Switch, Route, Link, HashRouter as Router} from 'react-router-dom';\n\nconst routing = (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/admin\" component={AdminDefault} />\n          <Route path=\"/\" component={App} />\n        </Switch>\n      </div>\n    </Router>\n  )\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}