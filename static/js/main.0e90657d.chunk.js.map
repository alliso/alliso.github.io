{"version":3,"sources":["App.tsx","firebase.tsx","admin/Login.tsx","admin/AddProject.tsx","admin/Loged.tsx","admin/AdminDefault.tsx","serviceWorker.js","index.tsx"],"names":["App","react_default","a","createElement","className","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","AdminDefault","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","email","password","handleChange","bind","assertThisInitialized","login","event","setState","defineProperty","currentTarget","id","value","_this2","auth","signInWithEmailAndPassword","then","user","currentUser","setUser","localStorage","setItem","JSON","stringify","catch","error","console","log","index_es","container","direction","justify","alignItems","label","onChange","margin","variant","type","autoComplete","color","onClick","React","PureComponent","labels","AddProject","proyect","description","link","label1","handleChangeFile","uploadFile","target","files","fileReader","FileReader","readAsDataURL","onload","e","image","result","ref","storage","child","putString","getDownloadURL","select","helperText","map","option","key","label2","label3","label4","label5","multiline","rowsMax","required","renderLabelPicker","AdminLoged","admin_AddProject","getItem","parse","Loged","Login","Boolean","window","location","hostname","match","routing","react_router_dom","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAgBeA,MAbf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,8HCENE,IAASC,cARI,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,kBAINP,QAAf,ECyDaQ,cAxDX,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACpBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,MAAM,GAAIC,SAAS,IAEjCT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IACpBA,EAAKa,MAAQb,EAAKa,MAAMF,KAAXV,OAAAW,EAAA,EAAAX,CAAAD,IALOA,4EAQXc,GACTX,KAAKY,SAALd,OAAAe,EAAA,EAAAf,CAAA,GACKa,EAAMG,cAAcC,GAAIJ,EAAMG,cAAcE,wCAI7C,IAAAC,EAAAjB,KACAK,EAAeL,KAAKI,MAAMC,MAC1BC,EAAkBN,KAAKI,MAAME,SAEjCnB,EAAS+B,OAAOC,2BAA2Bd,EAAOC,GAAUc,KAAK,WAC7D,IAAIC,EAAOlC,EAAS+B,OAAOI,YAC3BL,EAAKrB,MAAM2B,QAAQF,GACnBG,aAAaC,QAAQ,WAAWC,KAAKC,UAAUN,MAChDO,MAAM,SAASC,GACdC,QAAQC,IAAI,qDAKhB,OACIhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,UAC3DrD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACIK,MAAM,QACNtB,GAAG,QACHuB,SAAUtC,KAAKO,aACfgC,OAAO,SACPC,QAAQ,WACRxB,MAAOhB,KAAKI,MAAMC,QAEtBtB,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACIK,MAAM,WACNtB,GAAG,WACHuB,SAAUtC,KAAKO,aACfkC,KAAK,WACLC,aAAa,mBACbH,OAAO,SACPC,QAAQ,aAEZzD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAQQ,QAAQ,YAAYG,MAAM,UAAUC,QAAS5C,KAAKU,OAA1D,iBAhDWmC,IAAMC,eCK3BC,EAAS,CACX,OAAO,aAAa,MAAM,UAC1B,iBAAkB,WAAY,QAmInBC,cA/HX,SAAAA,EAAYpD,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,IACtBnD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkD,GAAA7C,KAAAH,KAAMJ,KACDQ,MAAQ,CACT6C,QAAS,GACTC,YAAa,GACbC,KAAM,GACNC,OAAQ,IAEZvD,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IACpBA,EAAKwD,iBAAmBxD,EAAKwD,iBAAiB7C,KAAtBV,OAAAW,EAAA,EAAAX,CAAAD,IACxBA,EAAKyD,WAAazD,EAAKyD,WAAW9C,KAAhBV,OAAAW,EAAA,EAAAX,CAAAD,IAVIA,4EAabc,GACTmB,QAAQC,IAAIpB,EAAMG,cAAcE,OAChChB,KAAKY,SAALd,OAAAe,EAAA,EAAAf,CAAA,GACKa,EAAMG,cAAcC,GAAIJ,EAAMG,cAAcE,iDAIpCL,GAA0C,IAAAM,EAAAjB,KACvD,GAAGW,EAAM4C,OAAOC,MAAO,CACnB,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,cAAchD,EAAM4C,OAAOC,MAAM,IAC5CC,EAAWG,OAAS,SAACC,GACjB5C,EAAKL,SAAS,CACVkD,MAAOD,EAAEN,OAAOQ,gDAO5B,IAAIC,EAAM7E,EAAS8E,UAAUD,MAAME,MAAM,iBACzCF,EAAIG,UAAUnE,KAAKI,MAAM0D,MAAM,YAAY1C,KAAK,kBAAKU,QAAQC,IAAI,SAAUiC,EAAII,iBAAiBhD,oDAIhG,OAAQrC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,UAChErD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAWqC,QAAM,EAAChC,MAAM,gBAAgBC,SAAUtC,KAAKO,aACnD+D,WAAW,8BAA8B/B,OAAO,SAChDC,QAAQ,WAAWxB,MAAOhB,KAAKI,MAAMgD,QAChCL,EAAOwB,IAAI,SAAAC,GAAM,OACdzF,EAAAC,EAAAC,cAAA,UAAQ8B,GAAG,SAAS0D,IAAKD,EAAQxD,MAAOwD,GACnCA,MAIjBzF,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAWqC,QAAM,EAAChC,MAAM,gBAAgBC,SAAUtC,KAAKO,aACnD+D,WAAW,8BAA8B/B,OAAO,SAChDC,QAAQ,WAAWxB,MAAOhB,KAAKI,MAAMsE,QAChC3B,EAAOwB,IAAI,SAAAC,GAAM,OACdzF,EAAAC,EAAAC,cAAA,UAAQ8B,GAAG,SAAS0D,IAAKD,EAAQxD,MAAOwD,GACnCA,MAIjBzF,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAWqC,QAAM,EAAChC,MAAM,gBAAgBC,SAAUtC,KAAKO,aACnD+D,WAAW,8BAA8B/B,OAAO,SAChDC,QAAQ,WAAWxB,MAAOhB,KAAKI,MAAMuE,QAChC5B,EAAOwB,IAAI,SAAAC,GAAM,OACdzF,EAAAC,EAAAC,cAAA,UAAQ8B,GAAG,SAAS0D,IAAKD,EAAQxD,MAAOwD,GACnCA,MAIjBzF,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAWqC,QAAM,EAAChC,MAAM,gBAAgBC,SAAUtC,KAAKO,aACnD+D,WAAW,8BAA8B/B,OAAO,SAChDC,QAAQ,WAAWxB,MAAOhB,KAAKI,MAAMwE,QAChC7B,EAAOwB,IAAI,SAAAC,GAAM,OACdzF,EAAAC,EAAAC,cAAA,UAAQ8B,GAAG,SAAS0D,IAAKD,EAAQxD,MAAOwD,GACnCA,MAIjBzF,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAWqC,QAAM,EAAE/B,SAAUtC,KAAKO,aAC9B+D,WAAW,8BAA8B/B,OAAO,SAChDC,QAAQ,WAAWxB,MAAOhB,KAAKI,MAAMyE,QAChC9B,EAAOwB,IAAI,SAAAC,GAAM,OACdzF,EAAAC,EAAAC,cAAA,UAAQ8B,GAAG,SAAS0D,IAAKD,EAAQxD,MAAOwD,GACnCA,wCAgBrB,OADA1C,QAAQC,IAAI,SAAS/B,KAAKI,OAEtBrB,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,UAC3DrD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACIjB,GAAG,UACHsB,MAAM,sBACNC,SAAUtC,KAAKO,aACfgC,OAAO,SACPC,QAAQ,WACRxB,MAAOhB,KAAKI,MAAM6C,UAEtBlE,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACIjB,GAAG,cACHsB,MAAM,iBACNyC,WAAS,EACTC,QAAQ,IACRvC,QAAQ,WACRxB,MAAOhB,KAAKI,MAAM8C,YAClBZ,SAAUtC,KAAKO,aACfgC,OAAO,WAEXxD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOgD,UAAQ,EACX1C,SAAUtC,KAAKqD,iBACfZ,KAAK,SACRzC,KAAKiF,oBACNlG,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAQQ,QAAQ,YAAYG,MAAM,UAAUC,QAAS5C,KAAKsD,YAA1D,0BAzHST,IAAMC,eCThBoC,mLAJP,OAAOnG,EAAAC,EAAAC,cAACkG,EAAD,aAFUtC,IAAMC,eCkChBnD,cA9BX,SAAAA,EAAYC,GAAY,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACpBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYV2B,QAAU,SAACF,GACPxB,EAAKe,SAAS,CAACS,KAAMA,KAXrBxB,EAAK0B,QAAU1B,EAAK0B,QAAQf,KAAbV,OAAAW,EAAA,EAAAX,CAAAD,IAEX,IAAIwB,EAAOG,aAAa4D,QAAQ,YALhB,OAMb/D,IACCxB,EAAKO,MAAQ,CACTiB,KAAMK,KAAK2D,MAAMhE,KARTxB,wEAiBf,IAAAoB,EAAAjB,KAEL,OADAA,KAAKI,MAAQ0B,QAAQC,IAAI/B,KAAKI,OAAS0B,QAAQC,IAAI,QAE/ChD,EAAAC,EAAAC,cAAA,WACKe,KAAKI,OAASJ,KAAKI,MAAMiB,KAC1BtC,EAAAC,EAAAC,cAACqG,EAAD,MACAvG,EAAAC,EAAAC,cAACsG,EAAD,CAAOhE,QAAS,SAACF,GAAD,OAAcJ,EAAKM,QAAQF,cAxBhCwB,IAAMC,eCEb0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gFCVAC,EACF9G,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,KACE/G,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,KACEhH,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWvG,IACtCZ,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAOE,KAAK,IAAIC,UAAWpH,OAMrCqH,IAASC,OAAOP,EAASQ,SAASC,eAAe,SD8G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrF,KAAK,SAAAsF,GACjCA,EAAaC","file":"static/js/main.0e90657d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ALLISO</h1>\n        <p>\n          Página en construcción\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import firebase from 'firebase'\n\n  var config = {\n    apiKey: \"AIzaSyB4mu9eyUFrAalnLwa4t9P_el3VyW8b14E\",\n    authDomain: \"portfolio-c45e1.firebaseapp.com\",\n    databaseURL: \"https://portfolio-c45e1.firebaseio.com\",\n    projectId: \"portfolio-c45e1\",\n    storageBucket: \"portfolio-c45e1.appspot.com\",\n    messagingSenderId: \"1071304250407\"\n  };\n  firebase.initializeApp(config)\n\n  export default firebase\n","import React from 'react'\nimport {TextField, Grid, Button} from '@material-ui/core'\nimport firebase from '../firebase'\n\ninterface IProps {\n    setUser: (user:any) => void\n}\ninterface IState {\n    email: any\n    password: any\n}\n\nclass AdminDefault extends React.PureComponent<IProps, IState> {\n    constructor(props: any) {\n        super(props)\n        this.state = {email:'', password:''}\n        \n        this.handleChange = this.handleChange.bind(this)\n        this.login = this.login.bind(this)\n    }\n\n    handleChange(event:React.ChangeEvent<HTMLInputElement>){\n        this.setState<never>({\n            [event.currentTarget.id]:event.currentTarget.value\n        })\n    }\n\n    login() {\n        let email:string = this.state.email\n        let password:string = this.state.password\n\n        firebase.auth().signInWithEmailAndPassword(email, password).then(() => {\n            let user = firebase.auth().currentUser\n            this.props.setUser(user)\n            localStorage.setItem('authUser',JSON.stringify(user))\n        }).catch(function(error) {\n            console.log(\"LEOOOOOOOOOOON\")\n          })\n    }\n\n    render() {\n        return (\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                <TextField\n                    label=\"Email\"\n                    id=\"email\"\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    value={this.state.email}\n                />\n                <TextField\n                    label=\"Password\"\n                    id=\"password\"\n                    onChange={this.handleChange}\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n                <Button variant=\"contained\" color=\"primary\" onClick={this.login} >\n                    Login\n                </Button>\n            </Grid>\n        )\n    }\n}\n\n\nexport default AdminDefault","import React from 'react'\nimport firebase from '../firebase'\nimport {TextField, Grid, Button, Input} from '@material-ui/core'\n\ninterface IProps{}\n\ninterface IState{\n    proyect:string\n    description:string\n    image?:any | null | undefined\n    link:string\n    label1:string\n    label2?:string\n    label3?:string\n    label4?:string\n    label5?:string\n}\nconst labels = [\n    'HTML','JavaScript','CSS','ReactJs',\n    'Android Studio', 'Firebase', 'Java'\n]\n\nclass AddProject extends React.PureComponent<IProps, IState> {\n    constructor(props: IProps){\n        super(props)\n        this.state = {\n            proyect: \"\",\n            description: \"\",\n            link: \"\",\n            label1: \"\",\n        } \n        this.handleChange = this.handleChange.bind(this)\n        this.handleChangeFile = this.handleChangeFile.bind(this)\n        this.uploadFile = this.uploadFile.bind(this)\n    }\n\n    handleChange(event:React.ChangeEvent<HTMLInputElement>){\n        console.log(event.currentTarget.value)\n        this.setState<never>({\n            [event.currentTarget.id]:event.currentTarget.value\n        })\n    }\n\n    handleChangeFile(event:React.ChangeEvent<HTMLInputElement>){\n        if(event.target.files) {\n            const fileReader = new FileReader()\n            fileReader.readAsDataURL(event.target.files[0])\n            fileReader.onload = (e:any) => {\n                this.setState({\n                    image: e.target.result\n                })\n            }            \n        }        \n    }\n\n    uploadFile(){\n        let ref = firebase.storage().ref().child('images/prueba')\n        ref.putString(this.state.image,'data_url').then(()=> console.log(\"SUBIDO\", ref.getDownloadURL().then))\n    }\n\n    renderLabelPicker(){\n        return (<Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            <TextField select label=\"Native select\" onChange={this.handleChange}\n                helperText=\"Por favor, escoge habilidad\" margin=\"normal\"\n                variant=\"outlined\" value={this.state.label1} >\n                    {labels.map(option => (\n                        <option id=\"label1\" key={option} value={option}>\n                            {option}\n                        </option>\n                    ))}\n            </TextField>\n            <TextField select label=\"Native select\" onChange={this.handleChange}\n                helperText=\"Por favor, escoge habilidad\" margin=\"normal\"\n                variant=\"outlined\" value={this.state.label2} >\n                    {labels.map(option => (\n                        <option id=\"label2\" key={option} value={option}>\n                            {option}\n                        </option>\n                    ))}\n            </TextField>\n            <TextField select label=\"Native select\" onChange={this.handleChange}\n                helperText=\"Por favor, escoge habilidad\" margin=\"normal\"\n                variant=\"outlined\" value={this.state.label3} >\n                    {labels.map(option => (\n                        <option id=\"label3\" key={option} value={option}>\n                            {option}\n                        </option>\n                    ))}\n            </TextField>\n            <TextField select label=\"Native select\" onChange={this.handleChange}\n                helperText=\"Por favor, escoge habilidad\" margin=\"normal\"\n                variant=\"outlined\" value={this.state.label4} >\n                    {labels.map(option => (\n                        <option id=\"label4\" key={option} value={option}>\n                            {option}\n                        </option>\n                    ))}\n            </TextField>\n            <TextField select  onChange={this.handleChange}\n                helperText=\"Por favor, escoge habilidad\" margin=\"normal\"\n                variant=\"outlined\" value={this.state.label5} >\n                    {labels.map(option => (\n                        <option id=\"label5\" key={option} value={option}>\n                            {option}\n                        </option>\n                    ))}\n            </TextField>\n        </Grid>)\n    }\n\n    render(){\n        /*let db = firebase.firestore()\n        let data = {\n            surname:'cabra'\n        }\n        db.collection('projects').doc('Prueba1').set(data)\n        */\n        \n        console.log(\"ESTADO\",this.state)\n        return (\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                <TextField\n                    id=\"proyect\"\n                    label=\"Nombre del proyecto\"\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    value={this.state.proyect}\n                />\n                <TextField\n                    id=\"description\"\n                    label=\"Descripción\"\n                    multiline\n                    rowsMax=\"4\"\n                    variant=\"outlined\"\n                    value={this.state.description}\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                />\n                <Input required\n                    onChange={this.handleChangeFile}\n                    type=\"file\"/>\n                {this.renderLabelPicker()}\n                <Button variant=\"contained\" color=\"primary\" onClick={this.uploadFile} >\n                    Subir proyecto\n                </Button>\n            </Grid>\n        )\n    }\n}\nexport default AddProject\n","import React from 'react'\nimport AddProject from './AddProject'\n\ninterface IProps{}\n\ninterface IState{}\n\nclass AdminLoged extends React.PureComponent<IProps, IState> {\n    render(){\n        return <AddProject />\n    }\n}\n\nexport default AdminLoged","import React from 'react'\nimport Login from './Login'\nimport Loged from './Loged'\n\ninterface IProps {}\n\ninterface IState{\n    user:any | null\n}\n\nclass AdminDefault extends React.PureComponent<IProps, IState> {\n    constructor(props: any) {\n        super(props)\n\n        this.setUser = this.setUser.bind(this)\n\n            let user = localStorage.getItem('authUser')\n            if(user){\n                this.state = {\n                    user: JSON.parse(user)\n                }\n            }\n    }\n    \n    setUser = (user:any) => {\n        this.setState({user: user})\n    }\n\n    render() {\n        this.state ? console.log(this.state) : console.log(\"HUHU\") \n        return (\n            <div>\n                {this.state && this.state.user ? \n                <Loged /> :\n                <Login setUser={(user:any) => this.setUser(user)}/>\n                }\n            </div>\n        )\n    }\n}\n\nexport default AdminDefault","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AdminDefault from './admin/AdminDefault'\nimport * as serviceWorker from './serviceWorker';\nimport {Switch, Route, HashRouter as Router} from 'react-router-dom';\n\nconst routing = (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/admin\" component={AdminDefault} />\n          <Route path=\"/\" component={App} />\n        </Switch>\n      </div>\n    </Router>\n  )\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}